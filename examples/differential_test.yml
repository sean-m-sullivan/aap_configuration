---
- name: Playbook to configure ansible Controller post installation
  hosts: localhost
  connection: local
  vars:
    controller_validate_certs: false
  # Define following vars here, or in configs/controller_auth.yml
  # controller_hostname: controller.example.com
  # controller_username: admin
  # controller_password: changeme
  collections:
    - awx.awx
    - redhat_cop.controller_configuration

  pre_tasks:

    - name: "Determine collection (block)"
      block:
        - name: "Check if the collection ansible.controller is installed"
          ansible.builtin.set_fact:
            ansible_controller_collection_installed: "{{ lookup('ansible.builtin.pipe', 'ansible-galaxy collection list | grep -i ansible.controller || echo NOTINSTALLED') }}"
          failed_when: ansible_controller_collection_installed is match('NOTINSTALLED')
      rescue:
        - name: "Check if the collection awx.awx is installed"
          ansible.builtin.set_fact:
            awx_awx_collection_installed: "{{ lookup('ansible.builtin.pipe', 'ansible-galaxy collection list | grep -i awx.awx || echo NOTINSTALLED') }}"
          failed_when: awx_awx_collection_installed is match('NOTINSTALLED')
      always:
        - name: "Set the collection providing the controller_api lookup plugin"
          ansible.builtin.set_fact:
            controller_api_plugin: "{{ ('ansible.controller.controller_api' if ansible_controller_collection_installed is defined) | default('awx.awx.controller_api' if awx_awx_collection_installed is defined) | default('NONE') }}"
        - name: "Fail if no collection is detected"
          ansible.builtin.fail:
            msg: "One of the following collections is required to be installed: 'ansible.controller' or 'awx.awx'."
          when: controller_api_plugin is match('NONE')
        - name: "Show the plugin we are using"
          ansible.builtin.debug:
            msg: "Using the 'controller_api' plugin from: {{ controller_api_plugin }}"

    - name: Wait for Controller to come up
      ansible.builtin.uri:
        url: "https://{{ controller_hostname }}/api/v2/ping"
        status_code: 200
        validate_certs: "{{ controller_validate_certs }}"
      register: result
      until: result.status == 200
      retries: 10
      delay: 30
      ignore_errors: true

    - name: "Show result of ping"
      ansible.builtin.debug:
        var: result

    - name: Sleep for 60 seconds and allow awx to come up.
      ansible.builtin.wait_for:
        timeout: 60
      delegate_to: localhost

    - name: Include vars from configs directory
      ansible.builtin.include_vars:
        dir: ./configs
        ignore_files: [controller_config.yml.template]
        extensions: ["yml"]
      tags:
        - always

  roles:
    - dispatch  # The dispatch role calls all of the other roles.

  tasks:

    - name: Get the organization ID
      ansible.builtin.set_fact:
        controller_organization_id: "{{ lookup(controller_api_plugin, 'organizations', query_params={'name': 'Default'}, host=controller_hostname, username=controller_username, password=controller_password, verify_ssl=false) }}"

    - name: "Set empty lists for testing"
      ansible.builtin.set_fact:
        controller_api_results: []
        differential_test_items: []

    - name: "Error out on empty list"
      ansible.builtin.set_fact:
        error_empty_diff: "{{ lookup('redhat_cop.controller_configuration.controller_object_diff', api_list=controller_api_results, compare_list=differential_test_items, warn_on_empty_api=false) }}"
      ignore_errors: true
      register: error_results

    - name: "Warn out on empty list"
      ansible.builtin.set_fact:
        warn_empty_diff: "{{ lookup('redhat_cop.controller_configuration.controller_object_diff', api_list=controller_api_results, compare_list=differential_test_items) }}"
      register: warn_results

    - name: "Assert that the empty list error correctly"
      ansible.builtin.assert:
        that:
          - error_empty_diff is not defined
          - warn_empty_diff | length == 0
          - "'Unable to find items in api_list' in error_results.msg"

    - name: Differential Testing
      ansible.builtin.include_tasks: "./tasks/differential.yml"
      loop: "{{ differential_items }}"
      loop_control:
        loop_var: differential_item
...
